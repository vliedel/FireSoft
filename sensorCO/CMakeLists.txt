##########################################################################################
#               _/\/\/\/\/\____/\/\/\/\__/\/\/\/\/\____/\/\_______                       #
#               _/\/\____/\/\____/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\/\/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\__/\/\______/\/\____/\/\____/\/\__/\/\_______                       #
#               _/\/\____/\/\__/\/\/\/\__/\/\/\/\/\____/\/\/\/\/\_                       #
#               __________________________________________________                       #
##########################################################################################
# Part of RIDL, the RUR IDL builder which generates modules for middlewares, including 
# lightweight (robotic) middleware like YARP. 
# This makefile is part of a cmake build system. The code falls under the Lesser General 
# Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Nov 7, 2011
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "ticks".
#
# Copyright Â© 2011 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# Set name of project
SET(PROJECT_NAME "sensorCO")

# Set root dir, containting common headers
SET(ROOT_DIR "${CMAKE_SOURCE_DIR}/..")

# Start a project
PROJECT(${PROJECT_NAME})

# Include aim stuff
ADD_SUBDIRECTORY(aim)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/" "${ROOT_DIR}/cmake/")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
	"${PROJECT_NAME} requires an out of source build."
)

# Eigen header only matrix library
FIND_PACKAGE(Eigen3 REQUIRED)
INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

# Serial library, to talk over serial connection
FIND_PACKAGE(Serial REQUIRED)
INCLUDE_DIRECTORIES(${SERIAL_INCLUDE_DIR})
SET(LIBS ${LIBS} ${SERIAL_LIBS})

# Some debug information
MESSAGE("[*] Build type: ${CMAKE_BUILD_TYPE}")
MESSAGE("[*] \"${PROJECT_NAME}\" uses the following CXX flags: \"${CMAKE_CXX_FLAGS}\" (can be empty)")
MESSAGE ("[*] Libraries included: ${LIBS}")

# Source directory
SET(SOURCE_DIR "src")
SET(INCLUDE_DIR "inc")

# Program directory, containing source files with a main()
SET(PROGRAM_DIR "main")

# Search for source code.
FILE(GLOB folder_source ${SOURCE_DIR}/*.cpp ${SOURCE_DIR}/*.cc ${SOURCE_DIR}/*.c)
FILE(GLOB folder_header ${INCLUDE_DIR}/*.h ${ROOT_DIR}/inc/*.h)
SOURCE_GROUP("Source Files" FILES ${folder_source})
SOURCE_GROUP("Header Files" FILES ${folder_header})

# Search for program files: files with a main()
FILE(GLOB program_source ${PROGRAM_DIR}/*.cpp ${PROGRAM_DIR}/*.cc ${PROGRAM_DIR}/*.c)
FILE(GLOB program_header ${PROGRAM_DIR}/*.h)
SOURCE_GROUP("Source Files for programs" FILES ${program_source})
SOURCE_GROUP("Header Files for programs" FILES ${program_header})

# Automatically add include directories if needed.
FOREACH(header_file ${folder_header})
  GET_FILENAME_COMPONENT(p ${header_file} PATH)
  INCLUDE_DIRECTORIES(${p})
ENDFOREACH(header_file ${folder_header})

FOREACH(header_file ${program_header})
  GET_FILENAME_COMPONENT(p ${header_file} PATH)
  INCLUDE_DIRECTORIES(${p})
ENDFOREACH(header_file ${program_header})

# For references to header files
INCLUDE_DIRECTORIES(aim/inc)

# Set up executables
FOREACH(program_file ${program_source})
  IF (folder_source)
    GET_FILENAME_COMPONENT(f ${program_file} NAME_WE)
    ADD_EXECUTABLE(${f} ${program_file} ${program_header} ${folder_source} ${folder_header} ${AIM_FILES})
    TARGET_LINK_LIBRARIES(${f} ${LIBS})
    install(TARGETS ${f} RUNTIME DESTINATION bin)
  ELSE (folder_source)
    MESSAGE(FATAL_ERROR "No source code files found. Please add something")
  ENDIF (folder_source)
ENDFOREACH(program_file ${program_source})
